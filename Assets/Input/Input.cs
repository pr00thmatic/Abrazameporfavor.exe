//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.2
//     from Assets/Input/Input.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TheFuckingInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TheFuckingInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Input"",
    ""maps"": [
        {
            ""name"": ""TheInput"",
            ""id"": ""1c097b89-d6ea-4c41-b98b-5c860dc17b42"",
            ""actions"": [
                {
                    ""name"": ""Motion"",
                    ""type"": ""PassThrough"",
                    ""id"": ""41e6c1bf-5492-4e40-b744-20a0f3ffd47b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""dc4e4ea7-d80f-4677-a747-ec3a4667c9e5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5f34d393-649e-4744-b191-c9c8429735fc"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Motion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""9ec59755-611b-4c7b-bddd-23dfe0039501"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Motion"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""5953148b-2ff8-4214-be64-c8d7aa027f36"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Motion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ea037302-9b6b-4964-a1c1-3c3120edae1f"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Motion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""25205c3f-c93a-4652-8b0f-ed96101b5228"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Motion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""749bdb9b-6295-4ad9-aed3-10440da91e85"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Motion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""a762ff3d-da3b-49c4-9df6-6d1ae119e7c9"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0aed775a-4535-473a-adda-bd580562785d"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // TheInput
        m_TheInput = asset.FindActionMap("TheInput", throwIfNotFound: true);
        m_TheInput_Motion = m_TheInput.FindAction("Motion", throwIfNotFound: true);
        m_TheInput_Jump = m_TheInput.FindAction("Jump", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // TheInput
    private readonly InputActionMap m_TheInput;
    private ITheInputActions m_TheInputActionsCallbackInterface;
    private readonly InputAction m_TheInput_Motion;
    private readonly InputAction m_TheInput_Jump;
    public struct TheInputActions
    {
        private @TheFuckingInput m_Wrapper;
        public TheInputActions(@TheFuckingInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Motion => m_Wrapper.m_TheInput_Motion;
        public InputAction @Jump => m_Wrapper.m_TheInput_Jump;
        public InputActionMap Get() { return m_Wrapper.m_TheInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TheInputActions set) { return set.Get(); }
        public void SetCallbacks(ITheInputActions instance)
        {
            if (m_Wrapper.m_TheInputActionsCallbackInterface != null)
            {
                @Motion.started -= m_Wrapper.m_TheInputActionsCallbackInterface.OnMotion;
                @Motion.performed -= m_Wrapper.m_TheInputActionsCallbackInterface.OnMotion;
                @Motion.canceled -= m_Wrapper.m_TheInputActionsCallbackInterface.OnMotion;
                @Jump.started -= m_Wrapper.m_TheInputActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_TheInputActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_TheInputActionsCallbackInterface.OnJump;
            }
            m_Wrapper.m_TheInputActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Motion.started += instance.OnMotion;
                @Motion.performed += instance.OnMotion;
                @Motion.canceled += instance.OnMotion;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
            }
        }
    }
    public TheInputActions @TheInput => new TheInputActions(this);
    public interface ITheInputActions
    {
        void OnMotion(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
}
